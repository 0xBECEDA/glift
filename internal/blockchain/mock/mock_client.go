// Code generated by MockGen. DO NOT EDIT.
// Source: internal/blockchain/blockchain.go
//
// Generated by this command:
//
//	mockgen -source=internal/blockchain/blockchain.go -destination=internal/blockchain/mock/mock_client.go -package=blockchain
//

// Package blockchain is a generated GoMock package.
package blockchain

import (
	blockchain "app/internal/blockchain"
	context "context"
	ecdsa "crypto/ecdsa"
	big "math/big"
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	types "github.com/ethereum/go-ethereum/core/types"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetBalances mocks base method.
func (m *MockClient) GetBalances(ctx context.Context, address common.Address) (*blockchain.WalletBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalances", ctx, address)
	ret0, _ := ret[0].(*blockchain.WalletBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalances indicates an expected call of GetBalances.
func (mr *MockClientMockRecorder) GetBalances(ctx, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalances", reflect.TypeOf((*MockClient)(nil).GetBalances), ctx, address)
}

// SubmitFILTransaction mocks base method.
func (m *MockClient) SubmitFILTransaction(ctx context.Context, signer *ecdsa.PrivateKey, receiver common.Address, amount *big.Int) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitFILTransaction", ctx, signer, receiver, amount)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitFILTransaction indicates an expected call of SubmitFILTransaction.
func (mr *MockClientMockRecorder) SubmitFILTransaction(ctx, signer, receiver, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitFILTransaction", reflect.TypeOf((*MockClient)(nil).SubmitFILTransaction), ctx, signer, receiver, amount)
}

// SubmitIFILTransaction mocks base method.
func (m *MockClient) SubmitIFILTransaction(ctx context.Context, signer *ecdsa.PrivateKey, receiver common.Address, amount *big.Int) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitIFILTransaction", ctx, signer, receiver, amount)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitIFILTransaction indicates an expected call of SubmitIFILTransaction.
func (mr *MockClientMockRecorder) SubmitIFILTransaction(ctx, signer, receiver, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitIFILTransaction", reflect.TypeOf((*MockClient)(nil).SubmitIFILTransaction), ctx, signer, receiver, amount)
}
